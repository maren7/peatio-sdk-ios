// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: websocket.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PeatioRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String {
    get {return _storage._requestID}
    set {_uniqueStorage()._requestID = newValue}
  }

  var payload: OneOf_Payload? {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var heartbeatRequest: PeatioHeartbeatRequest {
    get {
      if case .heartbeatRequest(let v)? = _storage._payload {return v}
      return PeatioHeartbeatRequest()
    }
    set {_uniqueStorage()._payload = .heartbeatRequest(newValue)}
  }

  var ping: PeatioPing {
    get {
      if case .ping(let v)? = _storage._payload {return v}
      return PeatioPing()
    }
    set {_uniqueStorage()._payload = .ping(newValue)}
  }

  var subscribeMarketsTickerRequest: PeatioSubscribeMarketsTickerRequest {
    get {
      if case .subscribeMarketsTickerRequest(let v)? = _storage._payload {return v}
      return PeatioSubscribeMarketsTickerRequest()
    }
    set {_uniqueStorage()._payload = .subscribeMarketsTickerRequest(newValue)}
  }

  var subscribeMarketTradesRequest: PeatioSubscribeMarketTradesRequest {
    get {
      if case .subscribeMarketTradesRequest(let v)? = _storage._payload {return v}
      return PeatioSubscribeMarketTradesRequest()
    }
    set {_uniqueStorage()._payload = .subscribeMarketTradesRequest(newValue)}
  }

  var subscribeMarketDepthRequest: PeatioSubscribeMarketDepthRequest {
    get {
      if case .subscribeMarketDepthRequest(let v)? = _storage._payload {return v}
      return PeatioSubscribeMarketDepthRequest()
    }
    set {_uniqueStorage()._payload = .subscribeMarketDepthRequest(newValue)}
  }

  var subscribeMarketCandlesRequest: PeatioSubscribeMarketCandlesRequest {
    get {
      if case .subscribeMarketCandlesRequest(let v)? = _storage._payload {return v}
      return PeatioSubscribeMarketCandlesRequest()
    }
    set {_uniqueStorage()._payload = .subscribeMarketCandlesRequest(newValue)}
  }

  var subscribeViewerAccountsRequest: PeatioSubscribeViewerAccountsRequest {
    get {
      if case .subscribeViewerAccountsRequest(let v)? = _storage._payload {return v}
      return PeatioSubscribeViewerAccountsRequest()
    }
    set {_uniqueStorage()._payload = .subscribeViewerAccountsRequest(newValue)}
  }

  var subscribeViewerOrdersRequest: PeatioSubscribeViewerOrdersRequest {
    get {
      if case .subscribeViewerOrdersRequest(let v)? = _storage._payload {return v}
      return PeatioSubscribeViewerOrdersRequest()
    }
    set {_uniqueStorage()._payload = .subscribeViewerOrdersRequest(newValue)}
  }

  var unsubscribeMarketsTickerRequest: PeatioUnsubscribeMarketsTickerRequest {
    get {
      if case .unsubscribeMarketsTickerRequest(let v)? = _storage._payload {return v}
      return PeatioUnsubscribeMarketsTickerRequest()
    }
    set {_uniqueStorage()._payload = .unsubscribeMarketsTickerRequest(newValue)}
  }

  var unsubscribeMarketTradesRequest: PeatioUnsubscribeMarketTradesRequest {
    get {
      if case .unsubscribeMarketTradesRequest(let v)? = _storage._payload {return v}
      return PeatioUnsubscribeMarketTradesRequest()
    }
    set {_uniqueStorage()._payload = .unsubscribeMarketTradesRequest(newValue)}
  }

  var unsubscribeMarketDepthRequest: PeatioUnsubscribeMarketDepthRequest {
    get {
      if case .unsubscribeMarketDepthRequest(let v)? = _storage._payload {return v}
      return PeatioUnsubscribeMarketDepthRequest()
    }
    set {_uniqueStorage()._payload = .unsubscribeMarketDepthRequest(newValue)}
  }

  var unsubscribeMarketCandlesRequest: PeatioUnsubscribeMarketCandlesRequest {
    get {
      if case .unsubscribeMarketCandlesRequest(let v)? = _storage._payload {return v}
      return PeatioUnsubscribeMarketCandlesRequest()
    }
    set {_uniqueStorage()._payload = .unsubscribeMarketCandlesRequest(newValue)}
  }

  var unsubscribeViewerAccountsRequest: PeatioUnsubscribeViewerAccountsRequest {
    get {
      if case .unsubscribeViewerAccountsRequest(let v)? = _storage._payload {return v}
      return PeatioUnsubscribeViewerAccountsRequest()
    }
    set {_uniqueStorage()._payload = .unsubscribeViewerAccountsRequest(newValue)}
  }

  var unsubscribeViewerOrdersRequest: PeatioUnsubscribeViewerOrdersRequest {
    get {
      if case .unsubscribeViewerOrdersRequest(let v)? = _storage._payload {return v}
      return PeatioUnsubscribeViewerOrdersRequest()
    }
    set {_uniqueStorage()._payload = .unsubscribeViewerOrdersRequest(newValue)}
  }

  var authenticateCustomerRequest: PeatioAuthenticateCustomerRequest {
    get {
      if case .authenticateCustomerRequest(let v)? = _storage._payload {return v}
      return PeatioAuthenticateCustomerRequest()
    }
    set {_uniqueStorage()._payload = .authenticateCustomerRequest(newValue)}
  }

  var createOrderRequest: PeatioCreateOrderRequest {
    get {
      if case .createOrderRequest(let v)? = _storage._payload {return v}
      return PeatioCreateOrderRequest()
    }
    set {_uniqueStorage()._payload = .createOrderRequest(newValue)}
  }

  var cancelOrderRequest: PeatioCancelOrderRequest {
    get {
      if case .cancelOrderRequest(let v)? = _storage._payload {return v}
      return PeatioCancelOrderRequest()
    }
    set {_uniqueStorage()._payload = .cancelOrderRequest(newValue)}
  }

  var cancelAllOrdersRequest: PeatioCancelAllOrdersRequest {
    get {
      if case .cancelAllOrdersRequest(let v)? = _storage._payload {return v}
      return PeatioCancelAllOrdersRequest()
    }
    set {_uniqueStorage()._payload = .cancelAllOrdersRequest(newValue)}
  }

  var listMarketsRequest: PeatioListMarketsRequest {
    get {
      if case .listMarketsRequest(let v)? = _storage._payload {return v}
      return PeatioListMarketsRequest()
    }
    set {_uniqueStorage()._payload = .listMarketsRequest(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable {
    case heartbeatRequest(PeatioHeartbeatRequest)
    case ping(PeatioPing)
    case subscribeMarketsTickerRequest(PeatioSubscribeMarketsTickerRequest)
    case subscribeMarketTradesRequest(PeatioSubscribeMarketTradesRequest)
    case subscribeMarketDepthRequest(PeatioSubscribeMarketDepthRequest)
    case subscribeMarketCandlesRequest(PeatioSubscribeMarketCandlesRequest)
    case subscribeViewerAccountsRequest(PeatioSubscribeViewerAccountsRequest)
    case subscribeViewerOrdersRequest(PeatioSubscribeViewerOrdersRequest)
    case unsubscribeMarketsTickerRequest(PeatioUnsubscribeMarketsTickerRequest)
    case unsubscribeMarketTradesRequest(PeatioUnsubscribeMarketTradesRequest)
    case unsubscribeMarketDepthRequest(PeatioUnsubscribeMarketDepthRequest)
    case unsubscribeMarketCandlesRequest(PeatioUnsubscribeMarketCandlesRequest)
    case unsubscribeViewerAccountsRequest(PeatioUnsubscribeViewerAccountsRequest)
    case unsubscribeViewerOrdersRequest(PeatioUnsubscribeViewerOrdersRequest)
    case authenticateCustomerRequest(PeatioAuthenticateCustomerRequest)
    case createOrderRequest(PeatioCreateOrderRequest)
    case cancelOrderRequest(PeatioCancelOrderRequest)
    case cancelAllOrdersRequest(PeatioCancelAllOrdersRequest)
    case listMarketsRequest(PeatioListMarketsRequest)

  #if !swift(>=4.1)
    static func ==(lhs: PeatioRequest.OneOf_Payload, rhs: PeatioRequest.OneOf_Payload) -> Bool {
      switch (lhs, rhs) {
      case (.heartbeatRequest(let l), .heartbeatRequest(let r)): return l == r
      case (.ping(let l), .ping(let r)): return l == r
      case (.subscribeMarketsTickerRequest(let l), .subscribeMarketsTickerRequest(let r)): return l == r
      case (.subscribeMarketTradesRequest(let l), .subscribeMarketTradesRequest(let r)): return l == r
      case (.subscribeMarketDepthRequest(let l), .subscribeMarketDepthRequest(let r)): return l == r
      case (.subscribeMarketCandlesRequest(let l), .subscribeMarketCandlesRequest(let r)): return l == r
      case (.subscribeViewerAccountsRequest(let l), .subscribeViewerAccountsRequest(let r)): return l == r
      case (.subscribeViewerOrdersRequest(let l), .subscribeViewerOrdersRequest(let r)): return l == r
      case (.unsubscribeMarketsTickerRequest(let l), .unsubscribeMarketsTickerRequest(let r)): return l == r
      case (.unsubscribeMarketTradesRequest(let l), .unsubscribeMarketTradesRequest(let r)): return l == r
      case (.unsubscribeMarketDepthRequest(let l), .unsubscribeMarketDepthRequest(let r)): return l == r
      case (.unsubscribeMarketCandlesRequest(let l), .unsubscribeMarketCandlesRequest(let r)): return l == r
      case (.unsubscribeViewerAccountsRequest(let l), .unsubscribeViewerAccountsRequest(let r)): return l == r
      case (.unsubscribeViewerOrdersRequest(let l), .unsubscribeViewerOrdersRequest(let r)): return l == r
      case (.authenticateCustomerRequest(let l), .authenticateCustomerRequest(let r)): return l == r
      case (.createOrderRequest(let l), .createOrderRequest(let r)): return l == r
      case (.cancelOrderRequest(let l), .cancelOrderRequest(let r)): return l == r
      case (.cancelAllOrdersRequest(let l), .cancelAllOrdersRequest(let r)): return l == r
      case (.listMarketsRequest(let l), .listMarketsRequest(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PeatioResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String {
    get {return _storage._requestID}
    set {_uniqueStorage()._requestID = newValue}
  }

  var payload: OneOf_Payload? {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var success: PeatioSuccess {
    get {
      if case .success(let v)? = _storage._payload {return v}
      return PeatioSuccess()
    }
    set {_uniqueStorage()._payload = .success(newValue)}
  }

  var error: PeatioError {
    get {
      if case .error(let v)? = _storage._payload {return v}
      return PeatioError()
    }
    set {_uniqueStorage()._payload = .error(newValue)}
  }

  var pong: PeatioPong {
    get {
      if case .pong(let v)? = _storage._payload {return v}
      return PeatioPong()
    }
    set {_uniqueStorage()._payload = .pong(newValue)}
  }

  var heartbeat: PeatioHeartbeat {
    get {
      if case .heartbeat(let v)? = _storage._payload {return v}
      return PeatioHeartbeat()
    }
    set {_uniqueStorage()._payload = .heartbeat(newValue)}
  }

  var tickersSnapshot: PeatioTickersSnapshot {
    get {
      if case .tickersSnapshot(let v)? = _storage._payload {return v}
      return PeatioTickersSnapshot()
    }
    set {_uniqueStorage()._payload = .tickersSnapshot(newValue)}
  }

  var tickerUpdate: PeatioTickerUpdate {
    get {
      if case .tickerUpdate(let v)? = _storage._payload {return v}
      return PeatioTickerUpdate()
    }
    set {_uniqueStorage()._payload = .tickerUpdate(newValue)}
  }

  var tradesSnapshot: PeatioTradesSnapshot {
    get {
      if case .tradesSnapshot(let v)? = _storage._payload {return v}
      return PeatioTradesSnapshot()
    }
    set {_uniqueStorage()._payload = .tradesSnapshot(newValue)}
  }

  var tradeUpdate: PeatioTradeUpdate {
    get {
      if case .tradeUpdate(let v)? = _storage._payload {return v}
      return PeatioTradeUpdate()
    }
    set {_uniqueStorage()._payload = .tradeUpdate(newValue)}
  }

  var depthSnapshot: PeatioDepthSnapshot {
    get {
      if case .depthSnapshot(let v)? = _storage._payload {return v}
      return PeatioDepthSnapshot()
    }
    set {_uniqueStorage()._payload = .depthSnapshot(newValue)}
  }

  var depthUpdate: PeatioDepthUpdate {
    get {
      if case .depthUpdate(let v)? = _storage._payload {return v}
      return PeatioDepthUpdate()
    }
    set {_uniqueStorage()._payload = .depthUpdate(newValue)}
  }

  var accountsSnapshot: PeatioAccountsSnapshot {
    get {
      if case .accountsSnapshot(let v)? = _storage._payload {return v}
      return PeatioAccountsSnapshot()
    }
    set {_uniqueStorage()._payload = .accountsSnapshot(newValue)}
  }

  var accountUpdate: PeatioAccountUpdate {
    get {
      if case .accountUpdate(let v)? = _storage._payload {return v}
      return PeatioAccountUpdate()
    }
    set {_uniqueStorage()._payload = .accountUpdate(newValue)}
  }

  var candlesSnapshot: PeatioCandlesSnapshot {
    get {
      if case .candlesSnapshot(let v)? = _storage._payload {return v}
      return PeatioCandlesSnapshot()
    }
    set {_uniqueStorage()._payload = .candlesSnapshot(newValue)}
  }

  var candleUpdate: PeatioCandleUpdate {
    get {
      if case .candleUpdate(let v)? = _storage._payload {return v}
      return PeatioCandleUpdate()
    }
    set {_uniqueStorage()._payload = .candleUpdate(newValue)}
  }

  var ordersSnapshot: PeatioOrdersSnapshot {
    get {
      if case .ordersSnapshot(let v)? = _storage._payload {return v}
      return PeatioOrdersSnapshot()
    }
    set {_uniqueStorage()._payload = .ordersSnapshot(newValue)}
  }

  var orderUpdate: PeatioOrderUpdate {
    get {
      if case .orderUpdate(let v)? = _storage._payload {return v}
      return PeatioOrderUpdate()
    }
    set {_uniqueStorage()._payload = .orderUpdate(newValue)}
  }

  var listMarketsResponse: PeatioListMarketsResponse {
    get {
      if case .listMarketsResponse(let v)? = _storage._payload {return v}
      return PeatioListMarketsResponse()
    }
    set {_uniqueStorage()._payload = .listMarketsResponse(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable {
    case success(PeatioSuccess)
    case error(PeatioError)
    case pong(PeatioPong)
    case heartbeat(PeatioHeartbeat)
    case tickersSnapshot(PeatioTickersSnapshot)
    case tickerUpdate(PeatioTickerUpdate)
    case tradesSnapshot(PeatioTradesSnapshot)
    case tradeUpdate(PeatioTradeUpdate)
    case depthSnapshot(PeatioDepthSnapshot)
    case depthUpdate(PeatioDepthUpdate)
    case accountsSnapshot(PeatioAccountsSnapshot)
    case accountUpdate(PeatioAccountUpdate)
    case candlesSnapshot(PeatioCandlesSnapshot)
    case candleUpdate(PeatioCandleUpdate)
    case ordersSnapshot(PeatioOrdersSnapshot)
    case orderUpdate(PeatioOrderUpdate)
    case listMarketsResponse(PeatioListMarketsResponse)

  #if !swift(>=4.1)
    static func ==(lhs: PeatioResponse.OneOf_Payload, rhs: PeatioResponse.OneOf_Payload) -> Bool {
      switch (lhs, rhs) {
      case (.success(let l), .success(let r)): return l == r
      case (.error(let l), .error(let r)): return l == r
      case (.pong(let l), .pong(let r)): return l == r
      case (.heartbeat(let l), .heartbeat(let r)): return l == r
      case (.tickersSnapshot(let l), .tickersSnapshot(let r)): return l == r
      case (.tickerUpdate(let l), .tickerUpdate(let r)): return l == r
      case (.tradesSnapshot(let l), .tradesSnapshot(let r)): return l == r
      case (.tradeUpdate(let l), .tradeUpdate(let r)): return l == r
      case (.depthSnapshot(let l), .depthSnapshot(let r)): return l == r
      case (.depthUpdate(let l), .depthUpdate(let r)): return l == r
      case (.accountsSnapshot(let l), .accountsSnapshot(let r)): return l == r
      case (.accountUpdate(let l), .accountUpdate(let r)): return l == r
      case (.candlesSnapshot(let l), .candlesSnapshot(let r)): return l == r
      case (.candleUpdate(let l), .candleUpdate(let r)): return l == r
      case (.ordersSnapshot(let l), .ordersSnapshot(let r)): return l == r
      case (.orderUpdate(let l), .orderUpdate(let r)): return l == r
      case (.listMarketsResponse(let l), .listMarketsResponse(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PeatioError {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: Int64 = 0

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioSuccess {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ok: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioHeartbeatRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// second
  var interval: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioHeartbeat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioPing {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioPong {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioMarket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var baseAsset: String = String()

  var quoteAsset: String = String()

  var baseScale: UInt32 = 0

  var quoteScale: UInt32 = 0

  var minQuoteValue: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioPriceLevel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var price: String = String()

  var amount: String = String()

  var orderCount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioDepth {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var market: String = String()

  var asks: [PeatioPriceLevel] = []

  var bids: [PeatioPriceLevel] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioTicker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var market: String {
    get {return _storage._market}
    set {_uniqueStorage()._market = newValue}
  }

  var ask: PeatioPriceLevel {
    get {return _storage._ask ?? PeatioPriceLevel()}
    set {_uniqueStorage()._ask = newValue}
  }
  /// Returns true if `ask` has been explicitly set.
  var hasAsk: Bool {return _storage._ask != nil}
  /// Clears the value of `ask`. Subsequent reads from it will return its default value.
  mutating func clearAsk() {_uniqueStorage()._ask = nil}

  var bid: PeatioPriceLevel {
    get {return _storage._bid ?? PeatioPriceLevel()}
    set {_uniqueStorage()._bid = newValue}
  }
  /// Returns true if `bid` has been explicitly set.
  var hasBid: Bool {return _storage._bid != nil}
  /// Clears the value of `bid`. Subsequent reads from it will return its default value.
  mutating func clearBid() {_uniqueStorage()._bid = nil}

  var `open`: String {
    get {return _storage._open}
    set {_uniqueStorage()._open = newValue}
  }

  var high: String {
    get {return _storage._high}
    set {_uniqueStorage()._high = newValue}
  }

  var low: String {
    get {return _storage._low}
    set {_uniqueStorage()._low = newValue}
  }

  var close: String {
    get {return _storage._close}
    set {_uniqueStorage()._close = newValue}
  }

  var volume: String {
    get {return _storage._volume}
    set {_uniqueStorage()._volume = newValue}
  }

  var dailyChange: String {
    get {return _storage._dailyChange}
    set {_uniqueStorage()._dailyChange = newValue}
  }

  var dailyChangePerc: String {
    get {return _storage._dailyChangePerc}
    set {_uniqueStorage()._dailyChangePerc = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PeatioTrade {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var price: String {
    get {return _storage._price}
    set {_uniqueStorage()._price = newValue}
  }

  var amount: String {
    get {return _storage._amount}
    set {_uniqueStorage()._amount = newValue}
  }

  var market: String {
    get {return _storage._market}
    set {_uniqueStorage()._market = newValue}
  }

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  var makerOrder: PeatioOrder {
    get {return _storage._makerOrder ?? PeatioOrder()}
    set {_uniqueStorage()._makerOrder = newValue}
  }
  /// Returns true if `makerOrder` has been explicitly set.
  var hasMakerOrder: Bool {return _storage._makerOrder != nil}
  /// Clears the value of `makerOrder`. Subsequent reads from it will return its default value.
  mutating func clearMakerOrder() {_uniqueStorage()._makerOrder = nil}

  var takerOrder: PeatioOrder {
    get {return _storage._takerOrder ?? PeatioOrder()}
    set {_uniqueStorage()._takerOrder = newValue}
  }
  /// Returns true if `takerOrder` has been explicitly set.
  var hasTakerOrder: Bool {return _storage._takerOrder != nil}
  /// Clears the value of `takerOrder`. Subsequent reads from it will return its default value.
  mutating func clearTakerOrder() {_uniqueStorage()._takerOrder = nil}

  var takerSide: PeatioOrder.Side {
    get {return _storage._takerSide}
    set {_uniqueStorage()._takerSide = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PeatioOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// decimal or "MARKET"
  var price: String {
    get {return _storage._price}
    set {_uniqueStorage()._price = newValue}
  }

  /// decimal or empty
  var stopPrice: String {
    get {return _storage._stopPrice}
    set {_uniqueStorage()._stopPrice = newValue}
  }

  /// decimal non null
  var amount: String {
    get {return _storage._amount}
    set {_uniqueStorage()._amount = newValue}
  }

  /// market name
  var market: String {
    get {return _storage._market}
    set {_uniqueStorage()._market = newValue}
  }

  var side: PeatioOrder.Side {
    get {return _storage._side}
    set {_uniqueStorage()._side = newValue}
  }

  var state: PeatioOrder.State {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// decimal
  var filledAmount: String {
    get {return _storage._filledAmount}
    set {_uniqueStorage()._filledAmount = newValue}
  }

  /// decimal
  var filledFees: String {
    get {return _storage._filledFees}
    set {_uniqueStorage()._filledFees = newValue}
  }

  /// decimal
  var avgDealPrice: String {
    get {return _storage._avgDealPrice}
    set {_uniqueStorage()._avgDealPrice = newValue}
  }

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Side: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case bid // = 0
    case ask // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .bid
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .bid
      case 1: self = .ask
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .bid: return 0
      case .ask: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum State: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case pending // = 0
    case filled // = 1
    case cancelled // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .pending
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .pending
      case 1: self = .filled
      case 2: self = .cancelled
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .pending: return 0
      case .filled: return 1
      case .cancelled: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension PeatioOrder.Side: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [PeatioOrder.Side] = [
    .bid,
    .ask
  ]
}

extension PeatioOrder.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [PeatioOrder.State] = [
    .pending,
    .filled,
    .cancelled
  ]
}

#endif  // swift(>=4.2)

struct PeatioAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// asset symbol
  var asset: String = String()

  var balance: String = String()

  var lockedBalance: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioCandle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var market: String {
    get {return _storage._market}
    set {_uniqueStorage()._market = newValue}
  }

  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return _storage._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {_uniqueStorage()._time = nil}

  var `open`: String {
    get {return _storage._open}
    set {_uniqueStorage()._open = newValue}
  }

  var high: String {
    get {return _storage._high}
    set {_uniqueStorage()._high = newValue}
  }

  var low: String {
    get {return _storage._low}
    set {_uniqueStorage()._low = newValue}
  }

  var close: String {
    get {return _storage._close}
    set {_uniqueStorage()._close = newValue}
  }

  var volume: String {
    get {return _storage._volume}
    set {_uniqueStorage()._volume = newValue}
  }

  var period: PeatioCandle.Period {
    get {return _storage._period}
    set {_uniqueStorage()._period = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Period: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case min1 // = 0
    case min5 // = 1
    case min15 // = 2
    case min30 // = 3
    case hour1 // = 4
    case hour3 // = 5
    case hour4 // = 6
    case hour6 // = 7
    case hour12 // = 8
    case day1 // = 9
    case week1 // = 10
    case UNRECOGNIZED(Int)

    init() {
      self = .min1
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .min1
      case 1: self = .min5
      case 2: self = .min15
      case 3: self = .min30
      case 4: self = .hour1
      case 5: self = .hour3
      case 6: self = .hour4
      case 7: self = .hour6
      case 8: self = .hour12
      case 9: self = .day1
      case 10: self = .week1
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .min1: return 0
      case .min5: return 1
      case .min15: return 2
      case .min30: return 3
      case .hour1: return 4
      case .hour3: return 5
      case .hour4: return 6
      case .hour6: return 7
      case .hour12: return 8
      case .day1: return 9
      case .week1: return 10
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension PeatioCandle.Period: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [PeatioCandle.Period] = [
    .min1,
    .min5,
    .min15,
    .min30,
    .hour1,
    .hour3,
    .hour4,
    .hour6,
    .hour12,
    .day1,
    .week1
  ]
}

#endif  // swift(>=4.2)

struct PeatioSubscribeMarketsTickerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// list of market name, empty means subscribing all markets
  var markets: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioSubscribeMarketTradesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var market: String = String()

  var limit: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioSubscribeMarketDepthRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var market: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioSubscribeMarketCandlesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var market: String = String()

  var period: PeatioCandle.Period = .min1

  var limit: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioSubscribeViewerAccountsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioSubscribeViewerOrdersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var market: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioUnsubscribeMarketsTickerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// list of market name, empty means unsubscribing all markets
  var markets: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioUnsubscribeMarketTradesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var market: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioUnsubscribeMarketDepthRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var market: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioUnsubscribeMarketCandlesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var market: String = String()

  var period: PeatioCandle.Period = .min1

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioUnsubscribeViewerAccountsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioUnsubscribeViewerOrdersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var market: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioAuthenticateCustomerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var token: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioCreateOrderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// decimal or "MARKET"
  var price: String = String()

  /// decimal or empty
  var stopPrice: String = String()

  /// decimal non null
  var amount: String = String()

  /// market name
  var market: String = String()

  var side: PeatioOrder.Side = .bid

  var hidden: Bool = false

  var immediateOrCancel: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioCancelOrderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioCancelAllOrdersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// list of market name, empty means cancel all markets' orders
  var markets: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioListMarketsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioTickersSnapshot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tickers: [PeatioTicker] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioTickerUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ticker: PeatioTicker {
    get {return _storage._ticker ?? PeatioTicker()}
    set {_uniqueStorage()._ticker = newValue}
  }
  /// Returns true if `ticker` has been explicitly set.
  var hasTicker: Bool {return _storage._ticker != nil}
  /// Clears the value of `ticker`. Subsequent reads from it will return its default value.
  mutating func clearTicker() {_uniqueStorage()._ticker = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PeatioTradesSnapshot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trades: [PeatioTrade] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioTradeUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trade: PeatioTrade {
    get {return _storage._trade ?? PeatioTrade()}
    set {_uniqueStorage()._trade = newValue}
  }
  /// Returns true if `trade` has been explicitly set.
  var hasTrade: Bool {return _storage._trade != nil}
  /// Clears the value of `trade`. Subsequent reads from it will return its default value.
  mutating func clearTrade() {_uniqueStorage()._trade = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PeatioDepthSnapshot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var depth: PeatioDepth {
    get {return _storage._depth ?? PeatioDepth()}
    set {_uniqueStorage()._depth = newValue}
  }
  /// Returns true if `depth` has been explicitly set.
  var hasDepth: Bool {return _storage._depth != nil}
  /// Clears the value of `depth`. Subsequent reads from it will return its default value.
  mutating func clearDepth() {_uniqueStorage()._depth = nil}

  var changeID: UInt64 {
    get {return _storage._changeID}
    set {_uniqueStorage()._changeID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PeatioDepthUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var depth: PeatioDepth {
    get {return _storage._depth ?? PeatioDepth()}
    set {_uniqueStorage()._depth = newValue}
  }
  /// Returns true if `depth` has been explicitly set.
  var hasDepth: Bool {return _storage._depth != nil}
  /// Clears the value of `depth`. Subsequent reads from it will return its default value.
  mutating func clearDepth() {_uniqueStorage()._depth = nil}

  var changeID: UInt64 {
    get {return _storage._changeID}
    set {_uniqueStorage()._changeID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PeatioAccountsSnapshot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accounts: [PeatioAccount] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioAccountUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var account: PeatioAccount {
    get {return _storage._account ?? PeatioAccount()}
    set {_uniqueStorage()._account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  var hasAccount: Bool {return _storage._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  mutating func clearAccount() {_uniqueStorage()._account = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PeatioCandlesSnapshot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var candles: [PeatioCandle] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioCandleUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var candle: PeatioCandle {
    get {return _storage._candle ?? PeatioCandle()}
    set {_uniqueStorage()._candle = newValue}
  }
  /// Returns true if `candle` has been explicitly set.
  var hasCandle: Bool {return _storage._candle != nil}
  /// Clears the value of `candle`. Subsequent reads from it will return its default value.
  mutating func clearCandle() {_uniqueStorage()._candle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PeatioOrdersSnapshot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orders: [PeatioOrder] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PeatioOrderUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var order: PeatioOrder {
    get {return _storage._order ?? PeatioOrder()}
    set {_uniqueStorage()._order = newValue}
  }
  /// Returns true if `order` has been explicitly set.
  var hasOrder: Bool {return _storage._order != nil}
  /// Clears the value of `order`. Subsequent reads from it will return its default value.
  mutating func clearOrder() {_uniqueStorage()._order = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PeatioListMarketsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var markets: [PeatioMarket] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PeatioRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    200: .standard(proto: "heartbeat_request"),
    100: .same(proto: "ping"),
    101: .standard(proto: "subscribe_markets_ticker_request"),
    102: .standard(proto: "subscribe_market_trades_request"),
    103: .standard(proto: "subscribe_market_depth_request"),
    104: .standard(proto: "subscribe_market_candles_request"),
    105: .standard(proto: "subscribe_viewer_accounts_request"),
    106: .standard(proto: "subscribe_viewer_orders_request"),
    107: .standard(proto: "unsubscribe_markets_ticker_request"),
    108: .standard(proto: "unsubscribe_market_trades_request"),
    109: .standard(proto: "unsubscribe_market_depth_request"),
    110: .standard(proto: "unsubscribe_market_candles_request"),
    111: .standard(proto: "unsubscribe_viewer_accounts_request"),
    112: .standard(proto: "unsubscribe_viewer_orders_request"),
    113: .standard(proto: "authenticate_customer_request"),
    114: .standard(proto: "create_order_request"),
    115: .standard(proto: "cancel_order_request"),
    116: .standard(proto: "cancel_all_orders_request"),
    117: .standard(proto: "list_markets_request")
  ]

  fileprivate class _StorageClass {
    var _requestID: String = String()
    var _payload: PeatioRequest.OneOf_Payload?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _requestID = source._requestID
      _payload = source._payload
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._requestID)
        case 100:
          var v: PeatioPing?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .ping(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .ping(v)}
        case 101:
          var v: PeatioSubscribeMarketsTickerRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .subscribeMarketsTickerRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .subscribeMarketsTickerRequest(v)}
        case 102:
          var v: PeatioSubscribeMarketTradesRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .subscribeMarketTradesRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .subscribeMarketTradesRequest(v)}
        case 103:
          var v: PeatioSubscribeMarketDepthRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .subscribeMarketDepthRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .subscribeMarketDepthRequest(v)}
        case 104:
          var v: PeatioSubscribeMarketCandlesRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .subscribeMarketCandlesRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .subscribeMarketCandlesRequest(v)}
        case 105:
          var v: PeatioSubscribeViewerAccountsRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .subscribeViewerAccountsRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .subscribeViewerAccountsRequest(v)}
        case 106:
          var v: PeatioSubscribeViewerOrdersRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .subscribeViewerOrdersRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .subscribeViewerOrdersRequest(v)}
        case 107:
          var v: PeatioUnsubscribeMarketsTickerRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .unsubscribeMarketsTickerRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .unsubscribeMarketsTickerRequest(v)}
        case 108:
          var v: PeatioUnsubscribeMarketTradesRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .unsubscribeMarketTradesRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .unsubscribeMarketTradesRequest(v)}
        case 109:
          var v: PeatioUnsubscribeMarketDepthRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .unsubscribeMarketDepthRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .unsubscribeMarketDepthRequest(v)}
        case 110:
          var v: PeatioUnsubscribeMarketCandlesRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .unsubscribeMarketCandlesRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .unsubscribeMarketCandlesRequest(v)}
        case 111:
          var v: PeatioUnsubscribeViewerAccountsRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .unsubscribeViewerAccountsRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .unsubscribeViewerAccountsRequest(v)}
        case 112:
          var v: PeatioUnsubscribeViewerOrdersRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .unsubscribeViewerOrdersRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .unsubscribeViewerOrdersRequest(v)}
        case 113:
          var v: PeatioAuthenticateCustomerRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .authenticateCustomerRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .authenticateCustomerRequest(v)}
        case 114:
          var v: PeatioCreateOrderRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .createOrderRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .createOrderRequest(v)}
        case 115:
          var v: PeatioCancelOrderRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .cancelOrderRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .cancelOrderRequest(v)}
        case 116:
          var v: PeatioCancelAllOrdersRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .cancelAllOrdersRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .cancelAllOrdersRequest(v)}
        case 117:
          var v: PeatioListMarketsRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .listMarketsRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .listMarketsRequest(v)}
        case 200:
          var v: PeatioHeartbeatRequest?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .heartbeatRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .heartbeatRequest(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._requestID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._requestID, fieldNumber: 1)
      }
      switch _storage._payload {
      case .ping(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      case .subscribeMarketsTickerRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      case .subscribeMarketTradesRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
      case .subscribeMarketDepthRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
      case .subscribeMarketCandlesRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
      case .subscribeViewerAccountsRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 105)
      case .subscribeViewerOrdersRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 106)
      case .unsubscribeMarketsTickerRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 107)
      case .unsubscribeMarketTradesRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 108)
      case .unsubscribeMarketDepthRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 109)
      case .unsubscribeMarketCandlesRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 110)
      case .unsubscribeViewerAccountsRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 111)
      case .unsubscribeViewerOrdersRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
      case .authenticateCustomerRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 113)
      case .createOrderRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 114)
      case .cancelOrderRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 115)
      case .cancelAllOrdersRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 116)
      case .listMarketsRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 117)
      case .heartbeatRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioRequest, rhs: PeatioRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._requestID != rhs_storage._requestID {return false}
        if _storage._payload != rhs_storage._payload {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    98: .same(proto: "success"),
    99: .same(proto: "error"),
    100: .same(proto: "pong"),
    200: .same(proto: "heartbeat"),
    101: .standard(proto: "tickers_snapshot"),
    102: .standard(proto: "ticker_update"),
    103: .standard(proto: "trades_snapshot"),
    104: .standard(proto: "trade_update"),
    105: .standard(proto: "depth_snapshot"),
    106: .standard(proto: "depth_update"),
    107: .standard(proto: "accounts_snapshot"),
    108: .standard(proto: "account_update"),
    109: .standard(proto: "candles_snapshot"),
    110: .standard(proto: "candle_update"),
    111: .standard(proto: "orders_snapshot"),
    112: .standard(proto: "order_update"),
    113: .standard(proto: "list_markets_response")
  ]

  fileprivate class _StorageClass {
    var _requestID: String = String()
    var _payload: PeatioResponse.OneOf_Payload?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _requestID = source._requestID
      _payload = source._payload
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._requestID)
        case 98:
          var v: PeatioSuccess?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .success(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .success(v)}
        case 99:
          var v: PeatioError?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .error(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .error(v)}
        case 100:
          var v: PeatioPong?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .pong(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .pong(v)}
        case 101:
          var v: PeatioTickersSnapshot?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .tickersSnapshot(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .tickersSnapshot(v)}
        case 102:
          var v: PeatioTickerUpdate?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .tickerUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .tickerUpdate(v)}
        case 103:
          var v: PeatioTradesSnapshot?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .tradesSnapshot(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .tradesSnapshot(v)}
        case 104:
          var v: PeatioTradeUpdate?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .tradeUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .tradeUpdate(v)}
        case 105:
          var v: PeatioDepthSnapshot?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .depthSnapshot(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .depthSnapshot(v)}
        case 106:
          var v: PeatioDepthUpdate?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .depthUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .depthUpdate(v)}
        case 107:
          var v: PeatioAccountsSnapshot?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .accountsSnapshot(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .accountsSnapshot(v)}
        case 108:
          var v: PeatioAccountUpdate?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .accountUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .accountUpdate(v)}
        case 109:
          var v: PeatioCandlesSnapshot?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .candlesSnapshot(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .candlesSnapshot(v)}
        case 110:
          var v: PeatioCandleUpdate?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .candleUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .candleUpdate(v)}
        case 111:
          var v: PeatioOrdersSnapshot?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .ordersSnapshot(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .ordersSnapshot(v)}
        case 112:
          var v: PeatioOrderUpdate?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .orderUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .orderUpdate(v)}
        case 113:
          var v: PeatioListMarketsResponse?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .listMarketsResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .listMarketsResponse(v)}
        case 200:
          var v: PeatioHeartbeat?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .heartbeat(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .heartbeat(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._requestID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._requestID, fieldNumber: 1)
      }
      switch _storage._payload {
      case .success(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
      case .error(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
      case .pong(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      case .tickersSnapshot(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      case .tickerUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
      case .tradesSnapshot(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
      case .tradeUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
      case .depthSnapshot(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 105)
      case .depthUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 106)
      case .accountsSnapshot(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 107)
      case .accountUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 108)
      case .candlesSnapshot(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 109)
      case .candleUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 110)
      case .ordersSnapshot(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 111)
      case .orderUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
      case .listMarketsResponse(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 113)
      case .heartbeat(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioResponse, rhs: PeatioResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._requestID != rhs_storage._requestID {return false}
        if _storage._payload != rhs_storage._payload {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt64Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioError, rhs: PeatioError) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioSuccess: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Success"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ok")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.ok)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ok != false {
      try visitor.visitSingularBoolField(value: self.ok, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioSuccess, rhs: PeatioSuccess) -> Bool {
    if lhs.ok != rhs.ok {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioHeartbeatRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HeartbeatRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "interval")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.interval)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.interval != 0 {
      try visitor.visitSingularUInt64Field(value: self.interval, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioHeartbeatRequest, rhs: PeatioHeartbeatRequest) -> Bool {
    if lhs.interval != rhs.interval {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioHeartbeat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Heartbeat"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioHeartbeat, rhs: PeatioHeartbeat) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioPing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Ping"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioPing, rhs: PeatioPing) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioPong: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Pong"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioPong, rhs: PeatioPong) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioMarket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Market"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "base_asset"),
    3: .standard(proto: "quote_asset"),
    4: .standard(proto: "base_scale"),
    5: .standard(proto: "quote_scale"),
    6: .standard(proto: "min_quote_value")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.baseAsset)
      case 3: try decoder.decodeSingularStringField(value: &self.quoteAsset)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.baseScale)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.quoteScale)
      case 6: try decoder.decodeSingularStringField(value: &self.minQuoteValue)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.baseAsset.isEmpty {
      try visitor.visitSingularStringField(value: self.baseAsset, fieldNumber: 2)
    }
    if !self.quoteAsset.isEmpty {
      try visitor.visitSingularStringField(value: self.quoteAsset, fieldNumber: 3)
    }
    if self.baseScale != 0 {
      try visitor.visitSingularUInt32Field(value: self.baseScale, fieldNumber: 4)
    }
    if self.quoteScale != 0 {
      try visitor.visitSingularUInt32Field(value: self.quoteScale, fieldNumber: 5)
    }
    if !self.minQuoteValue.isEmpty {
      try visitor.visitSingularStringField(value: self.minQuoteValue, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioMarket, rhs: PeatioMarket) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.baseAsset != rhs.baseAsset {return false}
    if lhs.quoteAsset != rhs.quoteAsset {return false}
    if lhs.baseScale != rhs.baseScale {return false}
    if lhs.quoteScale != rhs.quoteScale {return false}
    if lhs.minQuoteValue != rhs.minQuoteValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioPriceLevel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PriceLevel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "price"),
    2: .same(proto: "amount"),
    3: .standard(proto: "order_count")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.price)
      case 2: try decoder.decodeSingularStringField(value: &self.amount)
      case 3: try decoder.decodeSingularInt64Field(value: &self.orderCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.price.isEmpty {
      try visitor.visitSingularStringField(value: self.price, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 2)
    }
    if self.orderCount != 0 {
      try visitor.visitSingularInt64Field(value: self.orderCount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioPriceLevel, rhs: PeatioPriceLevel) -> Bool {
    if lhs.price != rhs.price {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.orderCount != rhs.orderCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioDepth: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Depth"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "market"),
    2: .same(proto: "asks"),
    3: .same(proto: "bids")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.market)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.asks)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.bids)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.market.isEmpty {
      try visitor.visitSingularStringField(value: self.market, fieldNumber: 1)
    }
    if !self.asks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.asks, fieldNumber: 2)
    }
    if !self.bids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bids, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioDepth, rhs: PeatioDepth) -> Bool {
    if lhs.market != rhs.market {return false}
    if lhs.asks != rhs.asks {return false}
    if lhs.bids != rhs.bids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioTicker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Ticker"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "market"),
    2: .same(proto: "ask"),
    3: .same(proto: "bid"),
    4: .same(proto: "open"),
    5: .same(proto: "high"),
    6: .same(proto: "low"),
    7: .same(proto: "close"),
    8: .same(proto: "volume"),
    9: .same(proto: "dailyChange"),
    10: .same(proto: "dailyChangePerc")
  ]

  fileprivate class _StorageClass {
    var _market: String = String()
    var _ask: PeatioPriceLevel?
    var _bid: PeatioPriceLevel?
    var _open: String = String()
    var _high: String = String()
    var _low: String = String()
    var _close: String = String()
    var _volume: String = String()
    var _dailyChange: String = String()
    var _dailyChangePerc: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _market = source._market
      _ask = source._ask
      _bid = source._bid
      _open = source._open
      _high = source._high
      _low = source._low
      _close = source._close
      _volume = source._volume
      _dailyChange = source._dailyChange
      _dailyChangePerc = source._dailyChangePerc
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._market)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._ask)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._bid)
        case 4: try decoder.decodeSingularStringField(value: &_storage._open)
        case 5: try decoder.decodeSingularStringField(value: &_storage._high)
        case 6: try decoder.decodeSingularStringField(value: &_storage._low)
        case 7: try decoder.decodeSingularStringField(value: &_storage._close)
        case 8: try decoder.decodeSingularStringField(value: &_storage._volume)
        case 9: try decoder.decodeSingularStringField(value: &_storage._dailyChange)
        case 10: try decoder.decodeSingularStringField(value: &_storage._dailyChangePerc)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._market.isEmpty {
        try visitor.visitSingularStringField(value: _storage._market, fieldNumber: 1)
      }
      if let v = _storage._ask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._bid {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._open.isEmpty {
        try visitor.visitSingularStringField(value: _storage._open, fieldNumber: 4)
      }
      if !_storage._high.isEmpty {
        try visitor.visitSingularStringField(value: _storage._high, fieldNumber: 5)
      }
      if !_storage._low.isEmpty {
        try visitor.visitSingularStringField(value: _storage._low, fieldNumber: 6)
      }
      if !_storage._close.isEmpty {
        try visitor.visitSingularStringField(value: _storage._close, fieldNumber: 7)
      }
      if !_storage._volume.isEmpty {
        try visitor.visitSingularStringField(value: _storage._volume, fieldNumber: 8)
      }
      if !_storage._dailyChange.isEmpty {
        try visitor.visitSingularStringField(value: _storage._dailyChange, fieldNumber: 9)
      }
      if !_storage._dailyChangePerc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._dailyChangePerc, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioTicker, rhs: PeatioTicker) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._market != rhs_storage._market {return false}
        if _storage._ask != rhs_storage._ask {return false}
        if _storage._bid != rhs_storage._bid {return false}
        if _storage._open != rhs_storage._open {return false}
        if _storage._high != rhs_storage._high {return false}
        if _storage._low != rhs_storage._low {return false}
        if _storage._close != rhs_storage._close {return false}
        if _storage._volume != rhs_storage._volume {return false}
        if _storage._dailyChange != rhs_storage._dailyChange {return false}
        if _storage._dailyChangePerc != rhs_storage._dailyChangePerc {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioTrade: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Trade"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "price"),
    3: .same(proto: "amount"),
    4: .same(proto: "market"),
    7: .standard(proto: "created_at"),
    9: .standard(proto: "maker_order"),
    10: .standard(proto: "taker_order"),
    11: .standard(proto: "taker_side")
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _price: String = String()
    var _amount: String = String()
    var _market: String = String()
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp?
    var _makerOrder: PeatioOrder?
    var _takerOrder: PeatioOrder?
    var _takerSide: PeatioOrder.Side = .bid

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _price = source._price
      _amount = source._amount
      _market = source._market
      _createdAt = source._createdAt
      _makerOrder = source._makerOrder
      _takerOrder = source._takerOrder
      _takerSide = source._takerSide
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._price)
        case 3: try decoder.decodeSingularStringField(value: &_storage._amount)
        case 4: try decoder.decodeSingularStringField(value: &_storage._market)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._makerOrder)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._takerOrder)
        case 11: try decoder.decodeSingularEnumField(value: &_storage._takerSide)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._price.isEmpty {
        try visitor.visitSingularStringField(value: _storage._price, fieldNumber: 2)
      }
      if !_storage._amount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._amount, fieldNumber: 3)
      }
      if !_storage._market.isEmpty {
        try visitor.visitSingularStringField(value: _storage._market, fieldNumber: 4)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._makerOrder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._takerOrder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if _storage._takerSide != .bid {
        try visitor.visitSingularEnumField(value: _storage._takerSide, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioTrade, rhs: PeatioTrade) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._market != rhs_storage._market {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._makerOrder != rhs_storage._makerOrder {return false}
        if _storage._takerOrder != rhs_storage._takerOrder {return false}
        if _storage._takerSide != rhs_storage._takerSide {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Order"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "price"),
    3: .standard(proto: "stop_price"),
    4: .same(proto: "amount"),
    5: .same(proto: "market"),
    6: .same(proto: "side"),
    7: .same(proto: "state"),
    8: .standard(proto: "filled_amount"),
    9: .standard(proto: "filled_fees"),
    10: .standard(proto: "avg_deal_price"),
    11: .standard(proto: "created_at"),
    12: .standard(proto: "updated_at")
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _price: String = String()
    var _stopPrice: String = String()
    var _amount: String = String()
    var _market: String = String()
    var _side: PeatioOrder.Side = .bid
    var _state: PeatioOrder.State = .pending
    var _filledAmount: String = String()
    var _filledFees: String = String()
    var _avgDealPrice: String = String()
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp?
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _price = source._price
      _stopPrice = source._stopPrice
      _amount = source._amount
      _market = source._market
      _side = source._side
      _state = source._state
      _filledAmount = source._filledAmount
      _filledFees = source._filledFees
      _avgDealPrice = source._avgDealPrice
      _createdAt = source._createdAt
      _updatedAt = source._updatedAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._price)
        case 3: try decoder.decodeSingularStringField(value: &_storage._stopPrice)
        case 4: try decoder.decodeSingularStringField(value: &_storage._amount)
        case 5: try decoder.decodeSingularStringField(value: &_storage._market)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._side)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._state)
        case 8: try decoder.decodeSingularStringField(value: &_storage._filledAmount)
        case 9: try decoder.decodeSingularStringField(value: &_storage._filledFees)
        case 10: try decoder.decodeSingularStringField(value: &_storage._avgDealPrice)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._price.isEmpty {
        try visitor.visitSingularStringField(value: _storage._price, fieldNumber: 2)
      }
      if !_storage._stopPrice.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stopPrice, fieldNumber: 3)
      }
      if !_storage._amount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._amount, fieldNumber: 4)
      }
      if !_storage._market.isEmpty {
        try visitor.visitSingularStringField(value: _storage._market, fieldNumber: 5)
      }
      if _storage._side != .bid {
        try visitor.visitSingularEnumField(value: _storage._side, fieldNumber: 6)
      }
      if _storage._state != .pending {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 7)
      }
      if !_storage._filledAmount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._filledAmount, fieldNumber: 8)
      }
      if !_storage._filledFees.isEmpty {
        try visitor.visitSingularStringField(value: _storage._filledFees, fieldNumber: 9)
      }
      if !_storage._avgDealPrice.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avgDealPrice, fieldNumber: 10)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioOrder, rhs: PeatioOrder) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._stopPrice != rhs_storage._stopPrice {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._market != rhs_storage._market {return false}
        if _storage._side != rhs_storage._side {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._filledAmount != rhs_storage._filledAmount {return false}
        if _storage._filledFees != rhs_storage._filledFees {return false}
        if _storage._avgDealPrice != rhs_storage._avgDealPrice {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioOrder.Side: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BID"),
    1: .same(proto: "ASK")
  ]
}

extension PeatioOrder.State: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PENDING"),
    1: .same(proto: "FILLED"),
    2: .same(proto: "CANCELLED")
  ]
}

extension PeatioAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Account"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asset"),
    2: .same(proto: "balance"),
    3: .standard(proto: "locked_balance")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.asset)
      case 2: try decoder.decodeSingularStringField(value: &self.balance)
      case 3: try decoder.decodeSingularStringField(value: &self.lockedBalance)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.asset.isEmpty {
      try visitor.visitSingularStringField(value: self.asset, fieldNumber: 1)
    }
    if !self.balance.isEmpty {
      try visitor.visitSingularStringField(value: self.balance, fieldNumber: 2)
    }
    if !self.lockedBalance.isEmpty {
      try visitor.visitSingularStringField(value: self.lockedBalance, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioAccount, rhs: PeatioAccount) -> Bool {
    if lhs.asset != rhs.asset {return false}
    if lhs.balance != rhs.balance {return false}
    if lhs.lockedBalance != rhs.lockedBalance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioCandle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Candle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "market"),
    2: .same(proto: "time"),
    3: .same(proto: "open"),
    4: .same(proto: "high"),
    5: .same(proto: "low"),
    6: .same(proto: "close"),
    7: .same(proto: "volume"),
    8: .same(proto: "period")
  ]

  fileprivate class _StorageClass {
    var _market: String = String()
    var _time: SwiftProtobuf.Google_Protobuf_Timestamp?
    var _open: String = String()
    var _high: String = String()
    var _low: String = String()
    var _close: String = String()
    var _volume: String = String()
    var _period: PeatioCandle.Period = .min1

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _market = source._market
      _time = source._time
      _open = source._open
      _high = source._high
      _low = source._low
      _close = source._close
      _volume = source._volume
      _period = source._period
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._market)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._time)
        case 3: try decoder.decodeSingularStringField(value: &_storage._open)
        case 4: try decoder.decodeSingularStringField(value: &_storage._high)
        case 5: try decoder.decodeSingularStringField(value: &_storage._low)
        case 6: try decoder.decodeSingularStringField(value: &_storage._close)
        case 7: try decoder.decodeSingularStringField(value: &_storage._volume)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._period)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._market.isEmpty {
        try visitor.visitSingularStringField(value: _storage._market, fieldNumber: 1)
      }
      if let v = _storage._time {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._open.isEmpty {
        try visitor.visitSingularStringField(value: _storage._open, fieldNumber: 3)
      }
      if !_storage._high.isEmpty {
        try visitor.visitSingularStringField(value: _storage._high, fieldNumber: 4)
      }
      if !_storage._low.isEmpty {
        try visitor.visitSingularStringField(value: _storage._low, fieldNumber: 5)
      }
      if !_storage._close.isEmpty {
        try visitor.visitSingularStringField(value: _storage._close, fieldNumber: 6)
      }
      if !_storage._volume.isEmpty {
        try visitor.visitSingularStringField(value: _storage._volume, fieldNumber: 7)
      }
      if _storage._period != .min1 {
        try visitor.visitSingularEnumField(value: _storage._period, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioCandle, rhs: PeatioCandle) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._market != rhs_storage._market {return false}
        if _storage._time != rhs_storage._time {return false}
        if _storage._open != rhs_storage._open {return false}
        if _storage._high != rhs_storage._high {return false}
        if _storage._low != rhs_storage._low {return false}
        if _storage._close != rhs_storage._close {return false}
        if _storage._volume != rhs_storage._volume {return false}
        if _storage._period != rhs_storage._period {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioCandle.Period: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MIN1"),
    1: .same(proto: "MIN5"),
    2: .same(proto: "MIN15"),
    3: .same(proto: "MIN30"),
    4: .same(proto: "HOUR1"),
    5: .same(proto: "HOUR3"),
    6: .same(proto: "HOUR4"),
    7: .same(proto: "HOUR6"),
    8: .same(proto: "HOUR12"),
    9: .same(proto: "DAY1"),
    10: .same(proto: "WEEK1")
  ]
}

extension PeatioSubscribeMarketsTickerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SubscribeMarketsTickerRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "markets")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.markets)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.markets.isEmpty {
      try visitor.visitRepeatedStringField(value: self.markets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioSubscribeMarketsTickerRequest, rhs: PeatioSubscribeMarketsTickerRequest) -> Bool {
    if lhs.markets != rhs.markets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioSubscribeMarketTradesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SubscribeMarketTradesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "market"),
    2: .same(proto: "limit")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.market)
      case 2: try decoder.decodeSingularInt64Field(value: &self.limit)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.market.isEmpty {
      try visitor.visitSingularStringField(value: self.market, fieldNumber: 1)
    }
    if self.limit != 0 {
      try visitor.visitSingularInt64Field(value: self.limit, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioSubscribeMarketTradesRequest, rhs: PeatioSubscribeMarketTradesRequest) -> Bool {
    if lhs.market != rhs.market {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioSubscribeMarketDepthRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SubscribeMarketDepthRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "market")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.market)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.market.isEmpty {
      try visitor.visitSingularStringField(value: self.market, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioSubscribeMarketDepthRequest, rhs: PeatioSubscribeMarketDepthRequest) -> Bool {
    if lhs.market != rhs.market {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioSubscribeMarketCandlesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SubscribeMarketCandlesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "market"),
    2: .same(proto: "period"),
    3: .same(proto: "limit")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.market)
      case 2: try decoder.decodeSingularEnumField(value: &self.period)
      case 3: try decoder.decodeSingularInt64Field(value: &self.limit)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.market.isEmpty {
      try visitor.visitSingularStringField(value: self.market, fieldNumber: 1)
    }
    if self.period != .min1 {
      try visitor.visitSingularEnumField(value: self.period, fieldNumber: 2)
    }
    if self.limit != 0 {
      try visitor.visitSingularInt64Field(value: self.limit, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioSubscribeMarketCandlesRequest, rhs: PeatioSubscribeMarketCandlesRequest) -> Bool {
    if lhs.market != rhs.market {return false}
    if lhs.period != rhs.period {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioSubscribeViewerAccountsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SubscribeViewerAccountsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioSubscribeViewerAccountsRequest, rhs: PeatioSubscribeViewerAccountsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioSubscribeViewerOrdersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SubscribeViewerOrdersRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "market")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.market)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.market.isEmpty {
      try visitor.visitSingularStringField(value: self.market, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioSubscribeViewerOrdersRequest, rhs: PeatioSubscribeViewerOrdersRequest) -> Bool {
    if lhs.market != rhs.market {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioUnsubscribeMarketsTickerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UnsubscribeMarketsTickerRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "markets")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.markets)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.markets.isEmpty {
      try visitor.visitRepeatedStringField(value: self.markets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioUnsubscribeMarketsTickerRequest, rhs: PeatioUnsubscribeMarketsTickerRequest) -> Bool {
    if lhs.markets != rhs.markets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioUnsubscribeMarketTradesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UnsubscribeMarketTradesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "market")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.market)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.market.isEmpty {
      try visitor.visitSingularStringField(value: self.market, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioUnsubscribeMarketTradesRequest, rhs: PeatioUnsubscribeMarketTradesRequest) -> Bool {
    if lhs.market != rhs.market {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioUnsubscribeMarketDepthRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UnsubscribeMarketDepthRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "market")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.market)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.market.isEmpty {
      try visitor.visitSingularStringField(value: self.market, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioUnsubscribeMarketDepthRequest, rhs: PeatioUnsubscribeMarketDepthRequest) -> Bool {
    if lhs.market != rhs.market {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioUnsubscribeMarketCandlesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UnsubscribeMarketCandlesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "market"),
    2: .same(proto: "period")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.market)
      case 2: try decoder.decodeSingularEnumField(value: &self.period)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.market.isEmpty {
      try visitor.visitSingularStringField(value: self.market, fieldNumber: 1)
    }
    if self.period != .min1 {
      try visitor.visitSingularEnumField(value: self.period, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioUnsubscribeMarketCandlesRequest, rhs: PeatioUnsubscribeMarketCandlesRequest) -> Bool {
    if lhs.market != rhs.market {return false}
    if lhs.period != rhs.period {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioUnsubscribeViewerAccountsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UnsubscribeViewerAccountsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioUnsubscribeViewerAccountsRequest, rhs: PeatioUnsubscribeViewerAccountsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioUnsubscribeViewerOrdersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UnsubscribeViewerOrdersRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "market")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.market)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.market.isEmpty {
      try visitor.visitSingularStringField(value: self.market, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioUnsubscribeViewerOrdersRequest, rhs: PeatioUnsubscribeViewerOrdersRequest) -> Bool {
    if lhs.market != rhs.market {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioAuthenticateCustomerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AuthenticateCustomerRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.token)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioAuthenticateCustomerRequest, rhs: PeatioAuthenticateCustomerRequest) -> Bool {
    if lhs.token != rhs.token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioCreateOrderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CreateOrderRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "price"),
    2: .standard(proto: "stop_price"),
    3: .same(proto: "amount"),
    4: .same(proto: "market"),
    5: .same(proto: "side"),
    6: .same(proto: "hidden"),
    7: .standard(proto: "immediate_or_cancel")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.price)
      case 2: try decoder.decodeSingularStringField(value: &self.stopPrice)
      case 3: try decoder.decodeSingularStringField(value: &self.amount)
      case 4: try decoder.decodeSingularStringField(value: &self.market)
      case 5: try decoder.decodeSingularEnumField(value: &self.side)
      case 6: try decoder.decodeSingularBoolField(value: &self.hidden)
      case 7: try decoder.decodeSingularBoolField(value: &self.immediateOrCancel)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.price.isEmpty {
      try visitor.visitSingularStringField(value: self.price, fieldNumber: 1)
    }
    if !self.stopPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.stopPrice, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 3)
    }
    if !self.market.isEmpty {
      try visitor.visitSingularStringField(value: self.market, fieldNumber: 4)
    }
    if self.side != .bid {
      try visitor.visitSingularEnumField(value: self.side, fieldNumber: 5)
    }
    if self.hidden != false {
      try visitor.visitSingularBoolField(value: self.hidden, fieldNumber: 6)
    }
    if self.immediateOrCancel != false {
      try visitor.visitSingularBoolField(value: self.immediateOrCancel, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioCreateOrderRequest, rhs: PeatioCreateOrderRequest) -> Bool {
    if lhs.price != rhs.price {return false}
    if lhs.stopPrice != rhs.stopPrice {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.market != rhs.market {return false}
    if lhs.side != rhs.side {return false}
    if lhs.hidden != rhs.hidden {return false}
    if lhs.immediateOrCancel != rhs.immediateOrCancel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioCancelOrderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CancelOrderRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.orderID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioCancelOrderRequest, rhs: PeatioCancelOrderRequest) -> Bool {
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioCancelAllOrdersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CancelAllOrdersRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "markets")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.markets)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.markets.isEmpty {
      try visitor.visitRepeatedStringField(value: self.markets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioCancelAllOrdersRequest, rhs: PeatioCancelAllOrdersRequest) -> Bool {
    if lhs.markets != rhs.markets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioListMarketsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ListMarketsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioListMarketsRequest, rhs: PeatioListMarketsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioTickersSnapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TickersSnapshot"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tickers")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.tickers)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tickers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tickers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioTickersSnapshot, rhs: PeatioTickersSnapshot) -> Bool {
    if lhs.tickers != rhs.tickers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioTickerUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TickerUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ticker")
  ]

  fileprivate class _StorageClass {
    var _ticker: PeatioTicker?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ticker = source._ticker
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ticker)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ticker {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioTickerUpdate, rhs: PeatioTickerUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ticker != rhs_storage._ticker {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioTradesSnapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TradesSnapshot"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trades")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.trades)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.trades.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.trades, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioTradesSnapshot, rhs: PeatioTradesSnapshot) -> Bool {
    if lhs.trades != rhs.trades {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioTradeUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TradeUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trade")
  ]

  fileprivate class _StorageClass {
    var _trade: PeatioTrade?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _trade = source._trade
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._trade)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._trade {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioTradeUpdate, rhs: PeatioTradeUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._trade != rhs_storage._trade {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioDepthSnapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DepthSnapshot"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "depth"),
    2: .standard(proto: "change_id")
  ]

  fileprivate class _StorageClass {
    var _depth: PeatioDepth?
    var _changeID: UInt64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _depth = source._depth
      _changeID = source._changeID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._depth)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._changeID)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._depth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._changeID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._changeID, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioDepthSnapshot, rhs: PeatioDepthSnapshot) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._depth != rhs_storage._depth {return false}
        if _storage._changeID != rhs_storage._changeID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioDepthUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DepthUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "depth"),
    2: .standard(proto: "change_id")
  ]

  fileprivate class _StorageClass {
    var _depth: PeatioDepth?
    var _changeID: UInt64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _depth = source._depth
      _changeID = source._changeID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._depth)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._changeID)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._depth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._changeID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._changeID, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioDepthUpdate, rhs: PeatioDepthUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._depth != rhs_storage._depth {return false}
        if _storage._changeID != rhs_storage._changeID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioAccountsSnapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AccountsSnapshot"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accounts")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.accounts)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.accounts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioAccountsSnapshot, rhs: PeatioAccountsSnapshot) -> Bool {
    if lhs.accounts != rhs.accounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioAccountUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AccountUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account")
  ]

  fileprivate class _StorageClass {
    var _account: PeatioAccount?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._account)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._account {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioAccountUpdate, rhs: PeatioAccountUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._account != rhs_storage._account {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioCandlesSnapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CandlesSnapshot"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "candles")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.candles)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.candles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.candles, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioCandlesSnapshot, rhs: PeatioCandlesSnapshot) -> Bool {
    if lhs.candles != rhs.candles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioCandleUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CandleUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "candle")
  ]

  fileprivate class _StorageClass {
    var _candle: PeatioCandle?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _candle = source._candle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._candle)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._candle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioCandleUpdate, rhs: PeatioCandleUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._candle != rhs_storage._candle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioOrdersSnapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "OrdersSnapshot"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orders")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.orders)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.orders, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioOrdersSnapshot, rhs: PeatioOrdersSnapshot) -> Bool {
    if lhs.orders != rhs.orders {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioOrderUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "OrderUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "order")
  ]

  fileprivate class _StorageClass {
    var _order: PeatioOrder?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _order = source._order
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._order)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._order {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioOrderUpdate, rhs: PeatioOrderUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._order != rhs_storage._order {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PeatioListMarketsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ListMarketsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "markets")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.markets)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.markets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.markets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PeatioListMarketsResponse, rhs: PeatioListMarketsResponse) -> Bool {
    if lhs.markets != rhs.markets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
